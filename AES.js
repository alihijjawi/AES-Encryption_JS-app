var fullKey = new Array(44);

var currentState = new Array(4);

var Sbox = [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]];

var rCon = [[0x00, 0x00, 0x00, 0x00],
            [0x01, 0x00, 0x00, 0x00],
            [0x02, 0x00, 0x00, 0x00],
            [0x04, 0x00, 0x00, 0x00],
            [0x08, 0x00, 0x00, 0x00],
            [0x10, 0x00, 0x00, 0x00],
            [0x20, 0x00, 0x00, 0x00],
            [0x40, 0x00, 0x00, 0x00],
            [0x80, 0x00, 0x00, 0x00],
            [0x1b, 0x00, 0x00, 0x00],
            [0x36, 0x00, 0x00, 0x00]]; 

var mul2 = [0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
            0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
            0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
            0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
            0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
            0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
            0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
            0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
            0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
            0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
            0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
            0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
            0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
            0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
            0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
            0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5 ];

var mul3 = [0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
            0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
            0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
            0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
            0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
            0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
            0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
            0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
            0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
            0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
            0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
            0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
            0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
            0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
            0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
            0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a ];


function do_resize(textbox) { 
    var txt=textbox.value;
    var cols=textbox.cols;
   
    var arraytxt=txt.split('\n');
    var rows=arraytxt.length; 
   
    textbox.rows=rows;
}

function error(s){
    var err = document.getElementById("error");
    var err_label = document.getElementById("err_label");
    var ans = document.getElementById("answer");
    var ans_label = document.getElementById("ans_label");
    var aes = document.getElementById("AES");

    err_label.style="display:inline-block;";
    err.value = s;
    err.hidden=false;
    aes.hidden=true;
    ans.hidden=true;
    ans_label.style="display:none;";
}

function AES(){
    var re = /[0-9A-Fa-f]{6}/g;

    var msg = document.getElementById("msg");
    var key = document.getElementById("key");
    var err = document.getElementById("error");
    var err_label = document.getElementById("err_label");
    var ans = document.getElementById("answer");
    var ans_label = document.getElementById("ans_label");
    var aes = document.getElementById("AES");

    msg.value=msg.value.trim();
    key.value=key.value.trim();

    if(msg.value==""||key.value==""){
        error("Either Key or Message are empty");
        return;
    }

    if(!re.test(msg.value)||msg.value.length!=32) {
        error("Message is invalid");
        return;
    }
    re.lastIndex = 0;

    if(!re.test(key.value)||key.value.length!=32) {
        error("Key is invalid");
        return;
    }
    re.lastIndex = 0;

    fullKey[0] = [parseInt(key.value[0]+key.value[1], 16),   parseInt(key.value[2]+key.value[3], 16), parseInt(key.value[4]+key.value[5], 16), parseInt(key.value[6]+key.value[7], 16)];
    fullKey[1] = [parseInt(key.value[8]+key.value[9], 16), parseInt(key.value[10]+key.value[11], 16), parseInt(key.value[12]+key.value[13], 16), parseInt(key.value[14]+key.value[15], 16)];
    fullKey[2] = [parseInt(key.value[16]+key.value[17], 16), parseInt(key.value[18]+key.value[19], 16), parseInt(key.value[20]+key.value[21], 16), parseInt(key.value[22]+key.value[23], 16)];
    fullKey[3] = [parseInt(key.value[24]+key.value[25], 16), parseInt(key.value[26]+key.value[27], 16), parseInt(key.value[28]+key.value[29], 16), parseInt(key.value[30]+key.value[31], 16)];

    currentState[0] = [parseInt(msg.value[0]+msg.value[1], 16),   parseInt(msg.value[2]+msg.value[3], 16), parseInt(msg.value[4]+msg.value[5], 16), parseInt(msg.value[6]+msg.value[7], 16)];
    currentState[1] = [parseInt(msg.value[8]+msg.value[9], 16), parseInt(msg.value[10]+msg.value[11], 16), parseInt(msg.value[12]+msg.value[13], 16), parseInt(msg.value[14]+msg.value[15], 16)];
    currentState[2] = [parseInt(msg.value[16]+msg.value[17], 16), parseInt(msg.value[18]+msg.value[19], 16), parseInt(msg.value[20]+msg.value[21], 16), parseInt(msg.value[22]+msg.value[23], 16)];
    currentState[3] = [parseInt(msg.value[24]+msg.value[25], 16), parseInt(msg.value[26]+msg.value[27], 16), parseInt(msg.value[28]+msg.value[29], 16), parseInt(msg.value[30]+msg.value[31], 16)];

    err.hidden=true;

    err_label.style="display:none;";

    aes.hidden=false;

    ans.hidden=false;

    ans_label.style="display:inline-block;";

    aes.value= "VVV CLICK HERE FOR MORE DETAILS VVV \n         START OF ROUND                    ROUND KEY            \n"

    AESEncryption();

    ans.value="";

    for (var i=0; i<4; i++) {
        for (var j=0; j<4; j++) {
            if (currentState[i][j] < 0x10)
            {
                ans.value+="0"+currentState[i][j].toString(16).toUpperCase()+" ";
            } else {
                ans.value+=currentState[i][j].toString(16).toUpperCase()+" ";
            }
        }
    }
}


/////////////////////////////////////

//////  AES FUNCTIONALITY CODE  /////

/////////////////////////////////////

function byteSubs(hex1, hex2)
{
    return Sbox[hex1][hex2];
}

function subWord(word)
{
    var result = new Array(4);
    for (var i=0; i<4; i++)
    {
        var temp = word[i];
        var hex = hex_to_ascii(temp);
        temp = byteSubs(hex[0], hex[1]);
        result[i] = temp;
    }
    return result;
}

function decimalToHexString(number)
{
    for (var i=0; i<4; i++) {
        if (number[i] < 0)
        {
            number[i] = 0xFFFFFFFF + number[i] + 1;
        }
        alert(number[i].toString(16).toUpperCase());
    }
}

function hex_to_ascii(str1)
{
    var hex = new Array(2);
    hex[1] = str1 % 0x10;
    //alert(str2); //2nd number
    str1 = str1 - str1 % 0x10;
    hex[0] = (str1)/16;
    //alert(str2); //1st number
    return hex;
}

function shiftRows()
{
    var temp = [
        [currentState[0][0], currentState[1][1], currentState[2][2], currentState[3][3]],
        [currentState[1][0], currentState[2][1], currentState[3][2], currentState[0][3]],
        [currentState[2][0], currentState[3][1], currentState[0][2], currentState[1][3]],
        [currentState[3][0], currentState[0][1], currentState[1][2], currentState[2][3]]
    ];
    return temp;
}

function rotWord(s)
{
    var t = new Array(4);
    for (var c=0; c<4; c++) { 
        t[c] = s[(c+1) % 4];
    }         
    return t;
};

function XORarr(a, b)
{
    var temp = new Array(4);
    for (var i=0; i<4; i++)
    {
        temp[i] = a[i] ^ b[i];
    }
    return temp;
}
function keyExpansion()
{ 
    var temp = new Array(4);
    for(var i=4; i<44; i++)
    {
        temp = fullKey[i-1];
        // temp = [0x2F, x , x, x]
        if(i % 4 == 0) {
            temp = rotWord(temp);
            temp = subWord(temp);
            var tempRCon = rCon[i/4];
            temp = XORarr(temp, tempRCon);
        }
        fullKey[i] = XORarr(temp, fullKey[i-4]);
    }
}

function addRoundKey(round)
{
    for (var i=0; i<4; i++)
        currentState[i] = XORarr(currentState[i], fullKey[4*round + i]);
}

function mixColumns()
{
    var temp = new Array(4);
    for (var i=0; i<4; i++)
        temp[i] = new Array(4);
    for (var i=0; i<4; ++i)
    {
        temp[i][0] = (mul2[currentState[i][0]] ^ mul3[currentState[i][1]] ^ currentState[i][2] ^ currentState[i][3]);
        temp[i][1] = (currentState[i][0] ^ mul2[currentState[i][1]] ^ mul3[currentState[i][2]] ^ currentState[i][3]);
        temp[i][2] = (currentState[i][0] ^ currentState[i][1] ^ mul2[currentState[i][2]] ^ mul3[currentState[i][3]]);
        temp[i][3] = (mul3[currentState[i][0]] ^ currentState[i][1] ^ currentState[i][2] ^ mul2[currentState[i][3]]);
    }
    currentState = temp;
}

function AESEncryption()
{
    var aes = document.getElementById("AES");
    for (var k=0; k<4; k++) {
        for (var w=0; w<4; w++) {
            if (currentState[w][k] < 0x10)
            {
                aes.value+="0"+currentState[w][k].toString(16).toUpperCase();
            } else {
                aes.value+=currentState[w][k].toString(16).toUpperCase();
            }
            aes.value+=" ";
        }
        aes.value+="\t\t\t";
        for (var w=0; w<4; w++){
            if (fullKey[w][k] < 0x10)
            {
                aes.value+="0"+fullKey[w][k].toString(16).toUpperCase();
            } else {
                aes.value+=fullKey[w][k].toString(16).toUpperCase();
            }
            aes.value+=" ";
        }
        aes.value+="\n"
    }
    aes.value+="\n"
    keyExpansion();                                             // KEY EXPANSION
    addRoundKey(0);                                             // INITIAL ADD ROUND KEY
    for (var k=0; k<4; k++) {
        for (var w=0; w<4; w++) {
            if (currentState[w][k] < 0x10)
            {
                aes.value+="0"+currentState[w][k].toString(16).toUpperCase();
            } else {
                aes.value+=currentState[w][k].toString(16).toUpperCase();
            }
            aes.value+=" ";
        }
        aes.value+="\t\t\t";
        for (var w=0; w<4; w++){
            if (fullKey[4+w][k] < 0x10)
            {
                aes.value+="0"+fullKey[4+w][k].toString(16).toUpperCase();
            } else {
                aes.value+=fullKey[4+w][k].toString(16).toUpperCase();
            }
            aes.value+=" ";
        }
        aes.value+="\n"
    }
    aes.value+="\n"
    for (var i=1; i<11; i++)
    { 
        for (var j=0; j<4; j++)
        {
            currentState[j] = subWord(currentState[j]);         // SUBSTITUTE BYTES
        }
        currentState = shiftRows();                             // SHIFT ROWs
        if (i != 10) mixColumns();                              // LOOK UP - MIX COLUMNS
        addRoundKey(i);                                         // ADD ROUND KEYS
        for (var k=0; k<4; k++) {
            for (var w=0; w<4; w++) {
                if (currentState[w][k] < 0x10)
                {
                    aes.value+="0"+currentState[w][k].toString(16).toUpperCase();
                } else {
                    aes.value+=currentState[w][k].toString(16).toUpperCase();
                }
                aes.value+=" ";
            }
            if(i<10){
                aes.value+="\t\t\t";
                for (var w=0; w<4; w++){
                    if (fullKey[4*(i+1)+w][k] < 0x10)
                    {
                        aes.value+="0"+fullKey[4*(i+1)+w][k].toString(16).toUpperCase();
                    } else {
                        aes.value+=fullKey[4*(i+1)+w][k].toString(16).toUpperCase();
                    }
                    aes.value+=" ";
                }
            }else{
                aes.value+="                                "
            }
            aes.value+="\n"
        }
        aes.value+="\n"
    }
}